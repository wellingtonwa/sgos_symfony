<?phpset_time_limit(0);class manutencao{    public $dadosModulo;    public $dadosCandidatos;    function conectar(){        // Conectando a base teste        if(mssql_connect('192.168.1.149', 'webuserac', 'ocvuosqlserver')==false)			die(mssql_get_last_message()."<br>Não foi possível conectar ao banco de dados! 1");        // Selecionando o banco de dados        if(mssql_select_db('ACWEB')==false)            die(mssql_get_last_message()."<br>Não foi possível conectar ao banco de dados! 2");    }    function executeQuery($sql){        $result = mssql_query($sql);        if($result == false)           die(mssql_get_last_message(). " <br>".$sql);        return $result;    }    function queryFetch($query){        $result = $this->executeQuery($query);        return mssql_fetch_object($result);    }    function queryFetchAllArray($query){        $result = $this->executeQuery($query);        while($array = mssql_fetch_array($result))            $arrayDeArrays[] = $array;        return $arrayDeArrays;    }    function queryFetchAll($query){        $result = $this->executeQuery($query);        while($objeto = mssql_fetch_object($result))            $arrayObjetos[] = $objeto;        return $arrayObjetos;    }    function getUrlNotaCandidato($numeroInscricao){        $linkNota = str_replace("&modulo=".$this->dadosModulo->numero_modulo, '', $this->dadosModulo->link);        return $linkNota."print&item=".$numeroInscricao."&layout=print";    }    function getNomeCandidato($output){        preg_match_all("/<tr ><td  align=(.)+left(.)+ >[a-zA-Z'. ]*/i", $output, $matchs);        return substr($matchs[0][0], 24);    }    	function microtime_float()	{		list($usec, $sec) = explode(" ", microtime());		return ((float)$usec + (float)$sec);	}	    function execute($idTrienio = null, $anoInicial=null, $anoFinal=null, $modulo){		$time_start =$this->microtime_float();        $this->conectar();				        $arrayLetras = range('A', 'Z');        if($idTrienio){            $sql = "SELECT * FROM pism_modulo WHERE id_trienio = ".$idTrienio;        }        else if($anoInicial AND $anoFinal){            $sql = "SELECT *                        FROM pism_modulo                        WHERE id_trienio IN (SELECT id                                                FROM pism_trienio                                                WHERE ano_inicial = ".$anoInicial."                                                    AND ano_final = ".$anoFinal.")                              AND numero_modulo = ".$modulo;        }        $this->dadosModulo = $this->queryFetch($sql);        if(!$this->dadosModulo)            die('Não foi possível obter os dados do trienio ou não há módulo cadastrado para o triênio!');        foreach($arrayLetras as $numeroLetra=>$letra){            $ch = curl_init($this->dadosModulo->link."&letra=".$letra);            curl_setopt($ch, CURLOPT_HEADER, 0);            curl_setopt($ch, CURLOPT_POST, 1);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);            $output = curl_exec($ch);            curl_close($ch);                        // Obtendo o número de inscrição do candidato            preg_match_all("/notas\('[0-9-]*'\)/i", $output, $matchs);            foreach($matchs[0] AS $numeroInscricao){                    $numeroInscricao = substr($numeroInscricao, 7,8);                    $this->dadosCandidatos[$numeroInscricao]['inscricao'] = $numeroInscricao;            }            //Módulo[s]?[Ie -]{2,10}Triênio [0-9]{4}/[0-9]{4}            foreach($this->dadosCandidatos AS $dadosCandidato){                $ch = curl_init($this->getUrlNotaCandidato($dadosCandidato['inscricao']));                curl_setopt($ch, CURLOPT_HEADER, 0);                curl_setopt($ch, CURLOPT_POST, 1);                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);                $output = curl_exec($ch);                curl_close($ch);								$time_end = $this->microtime_float();					$time = $time_end - $time_start;					echo "Did nothing in $time seconds\n";					var_dump($this->dadosCandidatos);exit;				                //var_dump($this->getUrlNotaCandidato($dadosCandidato['inscricao']));exit('asd');                // Nome Candidato                $this->dadosCandidatos[$dadosCandidato['inscricao']]['nome'] = $this->getNomeCandidato($output);                                // Obtem os nomes dos modulos                preg_match_all('/M.dulo [a-zA-Z\- ]*/i', $output, $matchs);                foreach($matchs[0] as $nomeModulo){                    $this->dadosCandidatos[$dadosCandidato['inscricao']]['modulos'][$nomeModulo]['disciplinas'];                    // Obtem os nomes das disciplinas                    preg_match_all("/>[a-zA-Z]{3}</i", $output, $matchs);                                        foreach($matchs[0] AS $nomeDisciplina){                        $this->dadosCandidatos[$dadosCandidato['inscricao']]['modulos'][$nomeModulo]['disciplinas'][substr($nomeDisciplina, 1, 3)] = array('notaDiscursiva'=>array(), 'notaObjetiva'=>array());                        $arrayDisciplinas[] = substr($nomeDisciplina, 1, 3);                    }                }                //var_dump($this->dadosCandidatos);exit('137');                /* foreach($arrayDisciplinas as $disciplina)                        echo "<br>INSERT INTO pism_disciplina VALUES(1, '$disciplina', ''); <br> INSERT INTO pism_disciplina VALUES(2, '$disciplina', '');";                exit; */                // Obtendo as notas nas disciplinas                preg_match_all('/<td  align="right" >[0-9]{0,2}[.]?[0-9]{0,2}<\/td>/i', $output, $matchs);                $totalDisciplinas = count($dadosCandidatos[$dadosCandidato['inscricao']]['modulos'][$nomeModulo]['disciplinas']);                $quantidadeModulos = count($dadosCandidatos[$dadosCandidato['inscricao']]['modulos']);                $tipoProva = 'notaDiscursiva';                foreach(array_keys($this->dadosCandidatos[$dadosCandidato['inscricao']]['modulos']) as $nomeModulo){                    $contadorDisciplinas = 0;                    $totalNotasAtribuidas = 0;                    // Separando as notas por módulos                    foreach($matchs[0] AS $idx=>$nota){                        // Primeiro vem a nota discursiva                        // Depois vem a nota objetiva                        if($contadorDisciplinas == $totalDisciplinas){                            $tipoProva = $tipoProva == 'notaDiscursiva' ? 'notaObjetiva' : 'notaDiscursiva';                            $totalNotasAtribuidas += $contadorDisciplinas;                            $contadorDisciplinas = 1;                        }                        else{                            $contadorDisciplinas++;                        }                        if($totalNotasAtribuidas == $totalDisciplinas*2){                            break;                        }                        $this->dadosCandidatos[$dadosCandidato['inscricao']]['modulos'][$nomeModulo]['disciplinas'][$arrayDisciplinas[$contadorDisciplinas-1]][$tipoProva] = (float) str_replace('</td>', '', str_replace('<td  align="right" >', '', $nota));                        unset($matchs[0][$idx]);                    }                }								if($numeroLetra == 1){					$time_end = $this->microtime_float();					$time = $time_end - $time_start;					echo "Did nothing in $time seconds\n";					var_dump($this->dadosCandidatos);exit;				}				sleep(7);            }            foreach($dadosCandidatos AS $dadosCandidato){                echo "<br>INSERT INTO pism_aluno VALUES('".$dadosCandidato['inscricao']."', '".$dadosCandidato['nome']."', NULL); <br>                        ";            }			exit;        }    }}$classe = new manutencao();$classe->execute(1, null, null, 1);?>